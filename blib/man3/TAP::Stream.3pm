.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Stream 3pm"
.TH TAP::Stream 3pm "2014-03-13" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Stream \- Combine multiple TAP streams with subtests
.SH "VERSION"
.IX Header "VERSION"
version 0.44
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use TAP::Stream;
\&    use TAP::Stream::Text;
\&
\&    my $tap1 = <<\*(AqEND\*(Aq;
\&    ok 1 \- foo 1
\&    ok 2 \- foo 2
\&    1..2
\&    END
\&
\&    # note that we have a failing test
\&    my $tap2 = <<\*(AqEND\*(Aq;
\&    ok 1 \- bar 1
\&    ok 2 \- bar 2
\&        1..3
\&        ok 1 \- bar subtest 1
\&        ok 2 \- bar subtest 2
\&        not ok 3 \- bar subtest 3 #TODO ignore
\&    ok 3 \- bar subtest
\&    not ok 4 \- bar 4
\&    1..4
\&    END
\&
\&    my $stream = TAP::Stream\->new;
\&
\&    $stream\->add_to_stream(
\&        TAP::Stream::Text\->new( name => \*(Aqfoo tests\*(Aq, text => $tap1 ),
\&        TAP::Stream::Text\->new( name => \*(Aqbar tests\*(Aq, text => $tap2 )
\&    );
\&
\&    print $stream\->to_string;
.Ve
.PP
Output:
.PP
.Vb 10
\&        ok 1 \- foo 1
\&        ok 2 \- foo 2
\&        1..2
\&    ok 1 \- foo tests
\&        ok 1 \- bar 1
\&        ok 2 \- bar 2
\&            1..3
\&            ok 1 \- bar subtest 1
\&            ok 2 \- bar subtest 2
\&            not ok 3 \- bar subtest 3 #TODO ignore
\&        ok 3 \- bar subtest
\&        not ok 4 \- bar 4
\&        1..4
\&    not ok 2 \- bar tests
\&    # Failed 1 out of 4 tests
\&    1..2
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes you find yourself needing to merge multiple streams of \s-1TAP\s0.
Several use cases:
.IP "\(bu" 4
Merging results from parallel tests
.IP "\(bu" 4
Running tests across multiple boxes and fetching their \s-1TAP\s0
.IP "\(bu" 4
Saving \s-1TAP\s0 and reassembling it later
.PP
TAP::Stream allows you to do this. You can both merge multiple chunks of
\&\s-1TAP\s0 text, or even multiple \f(CW\*(C`TAP::Stream\*(C'\fR objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBExperimental\fR module to combine multiple \s-1TAP\s0 streams.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $stream = TAP::Stream\->new( name => \*(AqParent stream\*(Aq );
.Ve
.PP
Creates a TAP::Stream object. The name is optional, but highly recommend to be
unique. The top-level stream's name is not used, but if you use
\&\f(CW\*(C`add_to_stream\*(C'\fR to add another stream object, that stream object should be
named or else the summary \f(CW\*(C`(not) ok\*(C'\fR line will be named \f(CW\*(C`Unnamed TAP stream\*(C'\fR
and this may make it harder to figure out which stream contained a failure.
.PP
Names should be descriptive of the use case of the stream.
.ie n .SS """name"""
.el .SS "\f(CWname\fP"
.IX Subsection "name"
.Vb 1
\&    my $name = $stream\->name;
.Ve
.PP
A read/write string accessor.
.PP
Returns the name of the stream. Default to \f(CW\*(C`Unnamed TAP stream\*(C'\fR. If you add
this stream to another stream, consider naming this stream for a more useful
\&\s-1TAP\s0 output. This is used to create the subtest summary line:
.PP
.Vb 4
\&        1..2
\&        ok 1 \- some test
\&        ok 2 \- another test
\&    ok 1 \- this is $stream\->name
.Ve
.ie n .SS """add_to_stream"""
.el .SS "\f(CWadd_to_stream\fP"
.IX Subsection "add_to_stream"
.Vb 3
\&    $stream\->add_to_stream(TAP::Stream::Text\->new(%args));
\&    # or
\&    $stream\->add_to_stream($another_stream);
.Ve
.PP
Add a TAP::Stream::Text object or another TAP::Stream object. You may
call this method multiple times. The following two chunks of code are the
same:
.PP
.Vb 4
\&    $stream\->add_to_stream(
\&        TAP::Stream::Text\->new( name => \*(Aqfoo tests\*(Aq, text => $tap1 ),
\&        TAP::Stream::Text\->new( name => \*(Aqbar tests\*(Aq, text => $tap2 )
\&    );
.Ve
.PP
Versus:
.PP
.Vb 6
\&    $stream\->add_to_stream(
\&        TAP::Stream::Text\->new( name => \*(Aqfoo tests\*(Aq, text => $tap1 ),
\&    );
\&    $stream\->add_to_stream(
\&        TAP::Stream::Text\->new( name => \*(Aqbar tests\*(Aq, text => $tap2 )
\&    );
.Ve
.PP
Stream objects can be added to other stream objects:
.PP
.Vb 1
\&    my $parent = TAP::Stream\->new; # the name is unused for the parent
\&
\&    my $stream = TAP::Stream\->new( name => \*(Aqchild stream\*(Aq );
\&
\&    $stream\->add_to_stream(
\&        TAP::Stream::Text\->new( name => \*(Aqfoo tests\*(Aq, text => $tap1 ),
\&        TAP::Stream::Text\->new( name => \*(Aqbar tests\*(Aq, text => $tap2 )
\&    );
\&    $parent\->add_to_stream($stream);
\&
\&    # later:
\&    $parent\->add_to_stream($another_stream);
\&    $parent\->add_to_stream(TAP::Stream::Text\->new%args);
\&    $parent\->add_to_stream($yet_another_stream);
\&
\&    say $parent\->to_string;
.Ve
.ie n .SS """to_string"""
.el .SS "\f(CWto_string\fP"
.IX Subsection "to_string"
.Vb 1
\&    say $stream\->to_string;
.Ve
.PP
Prints the stream as \s-1TAP\s0. We do not overload stringification.
.SH "HOW IT WORKS"
.IX Header "HOW IT WORKS"
Each chunk of \s-1TAP\s0 (or stream) that is added is added as a subtest. This avoids
issues of trying to recalculate the numbers. This means that if you
concatenate three \s-1TAP\s0 streams, each with 25 tests, you will still see 3 tests
reported (because you have three subtests).
.PP
There is a mini-TAP parser within \f(CW\*(C`TAP::Stream\*(C'\fR. As you add a chunk of \s-1TAP\s0 or
a stream, the parser analyzes the \s-1TAP\s0 and if there is a failure, the subtest
itself will be reported as a failure. Causes of failure:
.IP "\(bu" 4
Any failing tests (\s-1TODO\s0 tests, of course, are not failures)
.IP "\(bu" 4
No plan
.IP "\(bu" 4
Number of tests do not match the plan
.IP "\(bu" 4
More than one plan
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
Out-of-sequence tests not handled
.Sp
Currently we do not check for tests out of sequence because, in theory, test
numbers are strictly optional in \s-1TAP\s0. Make sure your \s-1TAP\s0 emitters Do The Right
Thing. Patches welcome.
.IP "\(bu" 4
Partial streams not handled
.Sp
Each chunk of \s-1TAP\s0 added must be a complete chunk of \s-1TAP\s0, complete with a plan.
You can't add tests 1 through 3, and then 4 through 7.
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
